#summary How to install the asterisk-unimrcp solution.

<wiki:toc max_depth="3" />
<br>
=1. Install from source =
==1.1. Obtain source ==
===Download source tarball ===
Use the link below to download the available source tarball:
    http://unimrcp.googlecode.com/files/uni-ast-package.tar.gz

===Checkout source via SVN ===
Use the command below to anonymously checkout the latest source code:
    svn checkout http://unimrcp.googlecode.com/svn/solutions/asterisk-unimrcp asterisk-unimrcp

==1.2. Build source ==
===Requirements ===
The Asterisk UniMRCP solution consists of a speech resource module as well as an asterisk application. It is required that UniMRCP and Asterisk be compiled and installed first.

  * UniMRCP 0.8.0
  * Asterisk 1.4, 1.6.0, 1.6.1, 1.6.2 or SVN HEAD

===GNU build (Linux and other Unix variants)===
====Additional requirements====
  * autoconf 2.57 or newer
  * automake
  * libtool 1.4 or newer
  * gcc
  * pkg-config

====Build procedure====
{{{
$ ./bootstrap
$ ./configure
$ make
$ make install
}}}

This will install the res_speech_unimrcp.so and app_unimrcp.so modules to /usr/lib/asterisk/modules and assume that UniMRCP is located in /usr/local/unimrcp.

====Configure options====
  * To explicitly specify where to look for Asterisk, use the "--with-asterisk=" and "--with-asterisk-conf=" options.
  * For example, if your Asterisk is installed in /usr/local/asterisk/1.6.1.10, use:
    $ ./configure --with-unimrcp=/usr/local/unimrcp --with-asterisk=/usr/local/asterisk/1.6.1.10
  * To explicitly specify where to place the Asterisk configuration files, use the "--with-asterisk-conf=" option:
    $ ./configure --with-asterisk=/usr/local/asterisk/conf
  * If "--with-asterisk" is not specified, then "/usr" will be assumed.
  * If "--with-asterisk" is specified, but not "--with-asterisk-conf", then the configuration file install path will be assumed as "$asterisk_dir/etc/asterisk", where $asterisk_dir is the directory specified by "--with-asterisk".
  * Currently the configuration file in the source tree's conf directory for the app_mrcp module doesn't install during the "make install" build process. Until this is implemented, simply copy the conf/mrcp.conf file to /etc/asterisk, or wherever the Asterisk configuration files reside.

<br>
<br>
=2. Text-to-speech application (MRCPSynth) =
MRCPSynth(text,options)
==Parameters==
text - The text to speak. Either plain text or SSML.

options - Options
  p  - profile to use in mrcp.conf<br>
  i  - digits to allow the TTS to be interrupted with<br>
  f  - filename on disk to store audio to (audio not stored if not specified or empty)<br>
  l  - language to use (e.g. "en-GB", "en-US", "en-AU", etc.)<br>
  v  - voice name to use (e.g. "Daniel", "Karin", etc.)<br>
  g  - voice gender to use (e.g. "male", "female")<br>
  a  - voice age to use<br>
  pv - prosody volume (silent/x-soft/soft/medium/load/x-loud/default)<br>
  pr - prosody rate (x-slow/slow/medium/fast/x-fast/default)<br>
  ll - load lexicon (true/false)<br>
  vv - voice variant

<br>
<br>
=3. Speech recognition application (MRCPRecog) =
MRCPRecog(grammar,options)
==Parameters==
grammar - The grammar (either inline or URL - as supported by the ASR engine).

options - Options
  p     - profile to use in mrcp.conf<br>
  i     - digits to allow the ASR to be interrupted with (set to none for DTMF grammars to allow DTMF to be sent to the MRCP server, otherwise if "any" or other digits specified, ASR will be interrupted and the digit will be returned in dialplan)<br>
  f     - filename on play (if empty or not specified, no file is played)<br>
  t     - Recognition timeout in milliseconds<br>
  b     - bargein value (no barge-in=0, ASR engine barge-in=1, Asterisk barge-in=2)<br>
  ct    - confidence threshold (0.0 - 1.0)<br>
  sl    - sensitivity level (0.0 - 1.0)<br>
  sva   - speed vs accuracy (0.0 - 1.0)<br>
  nb    - n-best list length<br>
  nit   - no input timeout<br>
  sit   - start input timers (true/false)<br>
  sct   - speech complete timeout<br>
  sint  - speech incomplete timeout<br>
  dit   - dtmf interdigit timeout<br>
  dtt   - dtmf terminate timout<br>
  dttc  - dtmf terminate characters<br>
  sw    - save waveform (true/false)<br>
  nac   - new audio channel (true/false)<br>
  sl    - speech language (en-US/en-GB/etc.)<br>
  rm    - recognition mode<br>
  hmaxd - hotword max duration<br>
  hmind - hotword min duration<br>
  cdb   - clear dtmf buffer (true/false)<br>
  enm   - early no match (true/false)<br>
  iwu   - input waveform URI<br>
  mt    - media type

The recognition result is stored in the dialplan variable RECOG_RESULT.

If a URI grammar is used, especially with Nuance Speech Server, the HTTP header Content-type needs to be set by the web server hosting the grammar.
<br>
<br>
=4. Example dialplan usage =
==4.1. Text-to-speech ==
===Using SSML===
{{{
exten => 1000,1,Answer
exten => 1000,n,Wait(2)
exten => 1000,n,MRCPSynth(<?xml version=\"1.0\"?><speak version=\"1.0\" xml:lang=\"en-AU\" xmlns=\"http://www.w3.org/2001/10/synthesis\"><voice name='Karin' gender='female'>Hello world!</voice></speak>,p=default&i=any&f=/tmp/synth.raw)
exten => 1000,n,Hangup
}}}

===Using plain text===
{{{
exten => 1001,1,Answer
exten => 1001,n,Wait(2)
exten => 1001,n,MRCPSynth(Hello world!,p=default&i=any&f=/tmp/synth.raw&l=en-GB&v=daniel&g=male)
exten => 1001,n,Hangup
}}}

==4.2. Speech recognition ==
{{{
exten => 1002,1,Answer
exten => 1002,n,Wait(2)
exten => 1002,n,MRCPRecog(<?xml version=\"1.0\"?><grammar xmlns=\"http://www.w3.org/2001/06/grammar\" xml:lang=\"en-GB\" version=\"1.0\" mode=\"voice\" root=\"digit\"><rule id=\"digit\"><one-of><item>one</item><item>two</item><item>three</item></one-of></rule></grammar>,p=default&i=any&t=5000&f=demo-instruct&b=1)
exten => 1002,n,Verbose(${RECOG_RESULT})
exten => 1002,n,Hangup
}}}